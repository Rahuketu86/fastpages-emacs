#+OPTIONS: toc:nil 
#+BEGIN_EXPORT html
---
layout: post
categories: [orgmode]
title: Emacs Conifguration is fixed
---
<link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
#+END_EXPORT

#+TOC: headlines 3

This post contains sample configuration for my emacs in an org file

* Emacs init.el
  #+BEGIN_EXAMPLE
    (package-initialize)

    (require 'org)
    (org-babel-load-file
          (expand-file-name "configuration.org"
                             user-emacs-directory))
  #+END_EXAMPLE

* Emacs Customization Group
  #+BEGIN_SRC emacs-lisp
    (setq custom-file
          (expand-file-name "custom.el"
                            user-emacs-directory))
  #+END_SRC

* Emacs Repositories
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    ;;;(add-to-list 'package-archives
    ;;;'             '("marmalade" . "http://marmalade-repo.org/packages/") t)
    (add-to-list 'package-archives
                 '("melpa-stable" . "https://stable.melpa.org/packages/") t)
    (add-to-list 'package-archives
                 '("melpa" . "http://melpa.org/packages/")
                 t)

	(add-to-list 'package-archives 
	             '("org" . "http://orgmode.org/elpa/")
				 t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
    (package-initialize)

  #+END_SRC


* Utility Functions
** Function to open this configuration file
   #+BEGIN_SRC emacs-lisp

     (defvar config-file-name "configuration.org")

     (defun my-config()
       "Function to open org configuration file"
       (interactive)
  
       (find-file (expand-file-name config-file-name
                                    user-emacs-directory)))  
   #+END_SRC

* Splash Screen and bars
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-splash-screen t
	  ;;      initial-scratch-message nil
	  ;;    initial-major-mode 'org-mode
	  )

    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    ;; (menu-bar-mode -1)
  #+END_SRC

* Configure Emacs for use-package
  #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
    ;;  (setq use-package-verbose t)
    ;;  (setq use-package-always-ensure t)
     ;; (eval-when-compile
     ;; (require 'use-package))
     ;; (use-package auto-compile
     ;; :config (auto-compile-on-load-mode))
     ;; (require 'diminish)
    ;;  ;;
    (require 'bind-key)
   #+END_SRC


* Emacs Custom Theme
  #+BEGIN_SRC emacs-lisp
    (use-package monokai-theme
      :ensure t
      :init (load-theme 'monokai t))
  #+END_SRC

* Setup Ido and smex
  #+BEGIN_SRC emacs-lisp
    ;; Activate ido
    (require 'ido)
    (ido-mode t)

    ;; Set up smex
    (use-package smex
      :ensure t
      :bind (("M-x" . smex))
      :config (smex-initialize))
  #+END_SRC
* Setup Guru Mode
  Guru mode works by disabling common key bindings and pushing for
  Emacs standard key bindings. Instead of global hook up Textmode and
  other so that it plays nice with ido-mode.
  #+BEGIN_SRC emacs-lisp
    (use-package guru-mode
      :ensure t
      :init
      (setq-default major-mode 'text-mode)
      :config
      (add-hook 'prog-mode-hook 'guru-mode)
      (add-hook 'text-mode-hook 'guru-mode)
     )
  #+END_SRC
* Setup Magit
  Magit is a git porcelain. With this we can stay within emacs for
  configuration modifications and commiting to git.
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind ("C-x g" . magit-status))
  #+END_SRC
  
* Setup Company Mode
  Company mode is used for autocompletion in Emacs.
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :defer t
      :config
       (global-company-mode)

;;      :config
;;       (global-company-mode))
	   )
  #+END_SRC
* Org-Mode Settings
  Global settings for all the org-mode buffers.

  #+BEGIN_SRC emacs-lisp
    (use-package org-mode
      :init (remove-hook 'org-mode-hook 'guru-mode)
      :bind (("\C-cl" . org-store-link)
             ("\C-ca" . org-agenda)
             ("\C-cc" . org-capture)
             ("\C-cb" . org-iswitch))
      :config
       (remove-hook 'org-mode-hook 'guru-mode))
  #+END_SRC

  Additional Org Mode plugins
  - Org Mode with Twitter bootstrap(ox-twbs)
    #+BEGIN_SRC emacs-lisp
      (use-package ox-twbs
        :ensure t
        :defer t)
    #+END_SRC

* Blog Settings

  #+BEGIN_SRC emacs-lisp
    (use-package htmlize
     :ensure t)
  #+END_SRC

* Setup ox-reveal
 #+BEGIN_SRC emacs-lisp
    (use-package org-re-reveal
      :ensure t
      :init
    )
    (package-refresh-contents)
   (use-package reftex
                :ensure t
                :commands turn-on-reftex
                )
     (use-package org-ref
         :ensure t
         :after org)

      (use-package org-re-reveal-ref
         :ensure t
         :after org)

  #+END_SRC

* Setup htmlize and addtional org-contrib
 #+BEGIN_SRC emacs-lisp
  (dolist (pkg '(org-plus-contrib htmlize))
    (unless (package-installed-p pkg)
      (package-install pkg)))
  #+END_SRC


* String manupulation library elisp
  #+begin_src emacs-lisp
    (use-package s
      :ensure t)
  #+end_src



* Fastpages Blog Publish function
#+begin_src emacs-lisp

  (require 'org)
  (require 'ox-publish)
  (require 'ox-html)
  (setq org-html-htmlize-output-type 'css)
  (setq org-publish-project-alist
	  '(

      ("org-post-fastpages"
	      ;; Path to your org files.
	      :base-directory "./_org/_posts"
	      :base-extension "org"

	      ;; Path to your Jekyll project.
	      :publishing-directory "./_posts/"
	      :recursive t
	      :publishing-function org-html-publish-to-html
	      :html-extension "md"
	      :body-only t ;; Only export section between <body> </body>
	)


	("org-static-fastpages"
	      :base-directory "./_org/assets"
	      :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
	      :publishing-directory "./assets/"
	      :recursive t
	      :publishing-function org-publish-attachment
	)

	("org-images-fastpages"
	      :base-directory "./_org/images"
	      :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
	      :publishing-directory "./images/"
	      :recursive t
	      :publishing-function org-publish-attachment
	)

	("fastpages" :components ("org-post-fastpages" "org-static-fastpages" "org-images-fastpages"))

    ))

  (defun fastpages-publish-all ()
    "Publish the blog to HTML."
    (interactive)
    (org-publish-all))
#+end_src


* FastPages link 

The idea is simple 

- Links are prepended by a directive
- When doing html export link get converted into jekyll include statement already defined in the code
- When exporting to other backends it follows the same structure as normal link for that structure

 #+begin_src emacs-lisp :results silent :exports "none"
 
 (defun jekyll-include (inc-tmpl url)
    (s-lex-format "{% include ${inc-tmpl} content='<a href=\"${url}\">${url}</a>' %}"))


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; (defun convert-to-link (text)											      ;;
  ;;   (let (														      ;;
  ;;    st_str))														      ;;
  ;; 															      ;;
  ;; (convert-to-link "This is simple text")										      ;;
  ;; (convert-to-link "A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine.")		      ;;
  ;; 															      ;;
  ;; 															      ;;
  ;; (defun get-till(sb str)												      ;;
  ;;   (substring str 0 (s-index-of sb str)))										      ;;
  ;; 															      ;;
  ;; (defun get-from (eb str)												      ;;
  ;;   (substring str (+ 1 (s-index-of eb str)) (length str)))								      ;;
  ;;   															      ;;
  ;; 															      ;;
  ;; (defun get-bracketted(sb eb str)											      ;;
  ;;   (substring str (+ 1 (s-index-of sb str))										      ;;
  ;; 	     (s-index-of eb str)))											      ;;
  ;; 															      ;;
  ;; (setq tstring "A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine.")		      ;;
  ;; 															      ;;
  ;; (substring tstring (+ 1 (s-index-of ")" tstring)) (length tstring))							      ;;
  ;; 															      ;;
  ;; (get-till "[" "This is a text")											      ;;
  ;; (get-from ")" "This is a test")											      ;;
  ;; 															      ;;
  ;; (get-till "[" "A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine.")		      ;;
  ;; 															      ;;
  ;; (get-bracketted "[" "]" "A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine.")	      ;;
  ;; 															      ;;
  ;; (get-bracketted "(" ")" "A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine.")	      ;;
  ;; 															      ;;
  ;; (let ((str "x is [xyz]"))												      ;;
  ;;   (substring str (+ 1 (s-index-of "[" str))										      ;;
  ;; 	     (s-index-of "]" str)))											      ;;
  ;; (s-index-of "[" "x is [x]")												      ;;
  ;; (s-index-of "]" "x is [x]")												      ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



  (defun jekyll-include-box (inc-tmpl inputtype text)
    (s-lex-format "{% include ${inc-tmpl} ${inputtype}=\"${text}\" %}"))


  (defun jekyll-include-remote-img (url caption)
    (if caption
	(s-lex-format "{% include image.html url='${url}' caption='${caption}' file='${url}' alt='${caption}' %}")
      (s-lex-format "{% include image.html url='${url}' file='${url}' alt='Image' %}")))


  (defun jekyll-include-local-img (url caption)
    (let ((n_url (s-lex-format "{{site.baseurl}}${url}")))
      (if caption
	  (s-lex-format "<figure>
      <img src=\"${n_url}\"
	   alt=\"${caption}\">
      <figcaption>${caption}</figcaption>
  </figure>")
	(s-lex-format "<figure>
      <img src=\"${n_url}\" >
  </figure>"))))


  (defun embed-img (url caption)
    (cond ((s-starts-with? "/images" url) (jekyll-include-local-img url caption))
	  ((s-starts-with? "/assets" url) (jekyll-include-local-img url caption))
	  (t (jekyll-include-remote-img url caption))))

  ;;(jekyll-include-img "/images/Emacs.png" "Emacs")

  (defun embed-iframe (url)
    (s-lex-format " <div style=\"text-align: center;\">
	<iframe width=\"560\" height=\"315\" src=\"${url}\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>
     </div>"))


  (defun get-yt-code (url)
    (car (s-split "&list=" (s-chop-prefixes '("https://www.youtube.com/watch?v=" "https://www.youtube.com/playlist?list=" "https://youtu.be/") url))))

  ;;(get-yt-code "https://www.youtube.com/watch?v=SmH3BPpl0TI")
  ;;(get-yt-code "https://www.youtube.com/playlist?list=PLxc79l2wpbJYTI5rv2os7OoKQMqxReZpr")
  ;;(get-yt-code "https://www.youtube.com/watch?v=SzA2YODtgK4&list=PLxc79l2wpbJYTI5rv2os7OoKQMqxReZpr")
  ;;(get-yt-code "https://youtu.be/VawlmG9tsXI")


  (defun embed-yt(url)
    (if (s-starts-with? "https://www.youtube.com/playlist?list=" url)
	(let ((code (get-yt-code url))
	      (embed-base "https://www.youtube.com/embed/videoseries?list="))
	  (embed-iframe (concat embed-base code)))
      (jekyll-include "youtube.html" (concat "https://youtu.be/" (get-yt-code url)))))

  ;;(embed-yt "https://www.youtube.com/watch?v=SmH3BPpl0TI")
  ;;(embed-yt "https://www.youtube.com/playlist?list=PLxc79l2wpbJYTI5rv2os7OoKQMqxReZpr")
  ;;(embed-yt "https://youtu.be/VawlmG9tsXI")

  (org-link-set-parameters
   "yt"
   :export (lambda (path desc backend)
	     (cond
	      ((eq 'html backend)
	       (embed-yt path ))))
   :help-echo "This links helps in exporting link to jekyll youtube liquid template")

  (org-link-set-parameters
   "twitter"
   :export (lambda (path desc backend)
	     (cond
	      ((eq 'html backend)
	       (jekyll-include "twitter.html" path ))))
   :help-echo "This links helps in exporting link to jekyll liquid twitter template")

  (org-link-set-parameters
   "img"
   :export (lambda (path desc backend)
	     (cond
	      ((eq 'html backend)
	       (embed-img  path desc))))
   :help-echo "This links helps in exporting link to jekyll liquid image template")

  (org-link-set-parameters
   "alert"
   :face '(:foreground "red" :underline t)
   :export (lambda (path desc backend)
	     (cond
	      ((eq 'html backend)
	       (jekyll-include-box "alert.html" "text" (or desc path)))))
   :help-echo "This links helps in exporting link to jekyll alert template")


  (org-link-set-parameters
   "info"
   :face '(:foreground "blue" :underline t)
   :export (lambda (path desc backend)
	     (cond
	      ((eq 'html backend)
	       (jekyll-include-box "info.html" "text" (or desc path)))))
   :help-echo "This links helps in exporting link to jekyll info template")


  (org-link-set-parameters
   "warning"
   :face '(:foreground "pink")
   :export (lambda (path desc backend)
	     (cond
	      ((eq 'html backend)
	       (jekyll-include-box "warning.html" "content" (or desc path)))))
   :help-echo "This links helps in exporting link to jekyll warning template")


  (org-link-set-parameters
   "important"
   :face '(:foreground "yellow")
   :export (lambda (path desc backend)
	     (cond
	      ((eq 'html backend)
	       (jekyll-include-box "important.html" "content" (or desc path)))))
   :help-echo "This links helps in exporting link to jekyll important template")

  (org-link-set-parameters
   "tip"
   :face '(:foreground "green")
   :export (lambda (path desc backend)
	     (cond
	      ((eq 'html backend)
	       (jekyll-include-box "tip.html" "content" (or desc path)))))
   :help-echo "This links helps in exporting link to jekyll tip template")


  (org-link-set-parameters
   "note"
   :face '(:foreground "light blue")
   :export (lambda (path desc backend)
	     (cond
	      ((eq 'html backend)
	       (jekyll-include-box "note.html" "content" (or desc path)))))
   :help-echo "This links helps in exporting link to jekyll note template")
#+end_src

